# 💬 ChatAIssist — Advanced AI Chatbot Built from Scratch

Welcome to **ChatAIssist**, an advanced and fully customizable **AI chatbot** built entirely from scratch in **Python** using **PyTorch** — no pre-trained models, no shortcuts. Everything from the model architecture to the dataset and training loop is handcrafted to offer a true deep learning engineering experience.

---

## 🚀 Overview

**ChatAIssist** is not just another chatbot. It’s a fully self-built intelligent assistant that understands user input, processes it through a neural network, and returns dynamic, intent-based responses. Designed for both learning and extensibility, this project is ideal for those who want to get their hands dirty and understand how conversational AI works at its core.

---

## 🛠 Features

- 🧠 **Custom Neural Network Architecture** (built with PyTorch)
- 📊 **Handcrafted Dataset & Preprocessing**
- 🔁 **Manual Training & Inference**
- 💡 **Intent Recognition & Response Mapping**
- 🌐 **Gradio Web Interface** for clean user interaction
- 🔌 **Optional Function Mapping** to trigger Python functions from conversation
- 🔒 **Offline & Self-contained** — No LLMs, no external APIs

---

## 📦 Tech Stack

- **Python 3.11+**
- **PyTorch** (Deep Learning)
- **NLTK** (Tokenization, Lemmatization)
- **Gradio** (UI Interface)
- **NumPy, JSON, TorchUtils** (Processing, storage, etc.)

---

## 📁 Project Structure

Advanced-AI-Chatbot/
│
├── intents.json # Dataset with patterns and responses
├── dimensions.json # Saved model input/output sizes
├── chatbot_model.pth # Trained PyTorch model
├── main.py # Main Python file for training/inference/UI
├── README.md # Project documentation


---

## ▶️ Getting Started

### 1. Clone the Repository

```bash
git clone https://github.com/islem73/Advanced-AI-Chatbot.git
cd ChatAIssist

### 2. Install Dependencies

```bash 
pip install torch nltk gradio

Optional: Download NLTK resources
```bash
import nltk
nltk.download('punkt')
nltk.download('wordnet')

### 3. Train the Model

You can train the model by uncommenting the following lines in main.py:
```bash

assistant.parse_intents()
assistant.prepare_data()
assistant.train_model(batch_size=8, lr=0.001, epochs=100)
assistant.save_model('chatbot_model.pth', 'dimensions.json')

### 4. Run the Chatbot
```bash
python main.py

---

## 📌 Customization

- **Add or update intents in intents.json.**
- **Modify the neural network in ChatbotModel.**
- **Integrate new tools/functions via the function_mapping parameter.**

## 📄 License
**This project is open-source and free to use under the MIT License.**


## 🙋‍♂️ Author
**Built with ❤️ by Islem Ben Ameur**


